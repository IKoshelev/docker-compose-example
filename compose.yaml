version: "3.8"

services:

  app-console:
    build:
      context: ./app-console # see ./app-console/Dockerfile
    profiles: [app-console]
    ports:
      - 8080:8080
    volumes:
      - type: bind
        source: ./app-console
        target: /source/app
    secrets:
      - ms-sql-db-password
      - mongo-document-db-password
      - azurite-well-known-key
    environment:
      - IS_DOCKER=TRUE
    # depends_on:
    #    ms-sql-db:
    #      condition: service_healthy
    
  app-aspnet:
    build:
      context: ./app-aspnet
    profiles: [app-aspnet]
    ports:
      - 5002:5002
      - 5003:5003
    volumes:
      - type: bind
        source: ./app-aspnet
        target: /source/app
      - type: bind
        source: ./certificate/
        target: /source/certificate
    secrets:
      - ms-sql-db-password
      - mongo-document-db-password
      - azurite-well-known-key
      - duende-identity-server-client-secret
    environment:
      - DOTNET_ENVIRONMENT=Docker #overrieds ASPNETCORE_ENVIRONMENT specifically for  WebApplication.CreateBuilder
      - ASPNETCORE_URLS=https://+:443;http://+80
      - ASPNETCORE_HTTPS_PORT=5002
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/source/certificate/dev-certificate.pfx
    env_file:
      - ./certificate/pass.env
    # depends_on:
    #    ms-sql-db:
    #      condition: service_healthy

  # You can use hardcoded users from infrastructure\duende-identity-server\Pages\TestUsers.cs to start practice,
  # and overall Duende is a complete commercial offering which supports most of OAuth and OIDC,
  # for more info check https://docs.duendesoftware.com/identityserver/v6/overview/
  duende-identity-server:
    build:
      context: ./infrastructure/duende-identity-server
    profiles: [infrastructure]
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    environment:
      - ASPNETCORE_URLS=https://+:443;http://+80
      - ASPNETCORE_HTTPS_PORT=5001
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/source/certificate/dev-certificate.pfx
    env_file:
      - ./certificate/pass.env
    ports:
      - 5000:5000
      - 5001:5001 # UI, ingress
    volumes:
      - type: bind
        source: ./infrastructure/duende-identity-server
        target: /source/app
      - type: bind
        source: ./certificate/
        target: /source/certificate
    healthcheck:
      test: curl -k https://localhost:5001
      interval: 5s
      retries: 30
  
  seq-open-telemetry-logs:
    image: datalust/seq
    profiles: [infrastructure]
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    environment:
      - ACCEPT_EULA=Y
    env_file:
      - ./infrastructure/seq-open-telemetry-logs/password-hash.env
    ports:
      - 5340:80 # UI
      - 5341:5341 # ingress
    # you can use either volume or bind to store files
    volumes:
      - type: volume
        source: seq-open-telemetry-logs
        target: /data
      # - type: bind
      #   source: ./seq-open-telemetry-logs/mount
      #   target: /data
    healthcheck:
      test: curl -k https://localhost:80
      interval: 5s
      retries: 30

  ms-sql-db:
    image: mcr.microsoft.com/mssql/server:2022-CU9-ubuntu-20.04
    profiles: [infrastructure]
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    secrets:
      - ms-sql-db-password
    # if you want to store DB file and log in host - 
    # put them into /var/opt/mssql-mount
    volumes:
      - type: volume
        source: ms-sql-db-data
        target: /var/opt/mssql
      - type: bind
        source: ./infrastructure/ms-sql-db/mount
        target: /var/opt/mssql-mount
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD_FILE=/run/secrets/ms-sql-db-password 
    ports:
      - 1433:1433
    healthcheck:
      test: /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P $(cat /run/secrets/ms-sql-db-password) -Q "SELECT 1" -b -o /dev/null
      interval: 10s
      timeout: 3s
      retries: 10
      start_period: 10s

  mongo-document-db:
    image: mongo
    profiles: [infrastructure]
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    secrets:
      - mongo-document-db-password
    # if you want to store DB in host - 
    # switch /data/db volumes (mongo does not let you choose specific location per db)
    volumes:
      - type: volume
        source: mongo-document-db-data
        target: /data/db
      # - type: bind
      #   source: ./infrastructure/mongo-document-db/mount
      #   target: /data/db
      - type: volume
        source: mongo-document-db-config
        target: /data/configdb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD_FILE=/run/secrets/mongo-document-db-password
    ports:
      - 27017:27017
    healthcheck:
      test: ["CMD","mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s

  # mongodb web admin tool
  mongo-document-db-express-web-ui:
    image: mongo-express
    profiles: [mongo-ui]
    restart: always
    ports:
      - 8081:8081
    secrets:
      - mongo-document-db-password
    environment:
      - ME_CONFIG_BASICAUTH_USERNAME=root
      - ME_CONFIG_BASICAUTH_PASSWORD_FILE=/run/secrets/mongo-document-db-password
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD_FILE=/run/secrets/mongo-document-db-password
      - ME_CONFIG_MONGODB_SERVER=mongo-document-db
      - ME_CONFIG_MONGODB_PORT=27017
      
  azurite-storage:
    image: mcr.microsoft.com/azure-storage/azurite
    profiles: [infrastructure]
    hostname: azurite-direct-hostname-492.com # we need to emulate propper URL, or Azure.Storage.Queues fails
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    # azurite is an emulator, not for production,
    # so it does not let you configure security,
    # it uses well-known uesrName devstoreaccount1 and well-known key
    # (see ./infrastructure/azurite-storage/well-known-key.txt)
    #secrets: 
    command: >
      azurite -l /workspace -d /workspace/debug.log 
      --blobHost 0.0.0.0 --blobPort 10000 
      --queueHost 0.0.0.0 --queuePort 10001 
      --tableHost 0.0.0.0 --tablePort 10002
      --loose
      --skipApiVersionCheck
      --disableProductStyleUrl
    ports:
      - "10000:10000"
      - "10001:10001"
      - "10002:10002"
    # you can use either volume or bind to store files
    volumes:
      - type: volume
        source: azurite-storage
        target: /workspace
      #- type: bind
      #  source: ./infrastructure/azurite-storage/mount
      #  target: /workspace
    healthcheck: # not sure, if this does anytning?
      test: nc 127.0.0.1 10000 -z
      interval: 1s
      retries: 30

volumes:
  ms-sql-db-data:
  mongo-document-db-data:
  mongo-document-db-config:
  azurite-storage:
  seq-open-telemetry-logs:
secrets:
  ms-sql-db-password:
    file: infrastructure/ms-sql-db/password.txt
  mongo-document-db-password:
    file: infrastructure/mongo-document-db/password.txt
  azurite-well-known-key:
    file: infrastructure/azurite-storage/well-known-key.txt
  duende-identity-server-client-secret:
    file: infrastructure/duende-identity-server/secret.txt
